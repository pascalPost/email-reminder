// Code generated by "enumer -type=ReminderFrequency -json -transform=snake -output=reminderFreq_enumer.go"; DO NOT EDIT.

package types

import (
	"encoding/json"
	"fmt"
)

const _ReminderFrequencyName = "semiannualannual"

var _ReminderFrequencyIndex = [...]uint8{0, 10, 16}

func (i ReminderFrequency) String() string {
	if i >= ReminderFrequency(len(_ReminderFrequencyIndex)-1) {
		return fmt.Sprintf("ReminderFrequency(%d)", i)
	}
	return _ReminderFrequencyName[_ReminderFrequencyIndex[i]:_ReminderFrequencyIndex[i+1]]
}

var _ReminderFrequencyValues = []ReminderFrequency{0, 1}

var _ReminderFrequencyNameToValueMap = map[string]ReminderFrequency{
	_ReminderFrequencyName[0:10]:  0,
	_ReminderFrequencyName[10:16]: 1,
}

// ReminderFrequencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReminderFrequencyString(s string) (ReminderFrequency, error) {
	if val, ok := _ReminderFrequencyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReminderFrequency values", s)
}

// ReminderFrequencyValues returns all values of the enum
func ReminderFrequencyValues() []ReminderFrequency {
	return _ReminderFrequencyValues
}

// IsAReminderFrequency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReminderFrequency) IsAReminderFrequency() bool {
	for _, v := range _ReminderFrequencyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ReminderFrequency
func (i ReminderFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ReminderFrequency
func (i *ReminderFrequency) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ReminderFrequency should be a string, got %s", data)
	}

	var err error
	*i, err = ReminderFrequencyString(s)
	return err
}
